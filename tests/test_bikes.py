"""Module for testing bike module"""

import datetime
import json
from unittest.mock import AsyncMock

import pytest
from httpx import ASGITransport, AsyncClient

from api.db.repository_bike import BikeRepository
from api.main import app
from api.models.db_models import Bike


class TestBikeRoute:
    """Class to test bike routes"""

    def get_fake_json_data(self, filename):
        """Gets fake data from json-file"""
        with open(f"tests/mock_files/{filename}.json", encoding="utf-8") as file:
            data = json.load(file)
        return data

    fake_bike_data = [
        Bike(
            id=1,
            battery_lvl=45,
            city_id=1,
            is_available=False,
            meta_data=None,
            created_at=datetime.datetime(
                2024, 7, 13, 7, 56, 50, 758246, tzinfo=datetime.timezone.utc
            ),
            updated_at=datetime.datetime(
                2024, 12, 17, 14, 21, 44, 610901, tzinfo=datetime.timezone.utc
            ),
        ),
        Bike(
            id=2,
            battery_lvl=95,
            city_id=3,
            is_available=True,
            meta_data=None,
            created_at=datetime.datetime(
                2024, 7, 13, 7, 56, 51, 758246, tzinfo=datetime.timezone.utc
            ),
            updated_at=datetime.datetime(
                2024, 12, 17, 14, 21, 46, 610901, tzinfo=datetime.timezone.utc
            ),
        ),
    ]

    @pytest.mark.asyncio
    async def test_get_all_bikes(self, monkeypatch):
        """Tests v1/bikes/ route"""

        # Mock database call
        mock_get_bikes = AsyncMock(return_value=self.fake_bike_data)
        monkeypatch.setattr(BikeRepository, "get_bikes", mock_get_bikes)

        async with AsyncClient(
            transport=ASGITransport(app=app), base_url="http://localhost:8000/"
        ) as ac:
            response = await ac.get("v1/bikes/")

        assert response.status_code == 200
        expected_response = self.get_fake_json_data("bikes")
        assert response.json() == expected_response

    @pytest.mark.asyncio
    async def test_get_all_bikes_filter(self, monkeypatch):
        """Tests that the filter parameters are used in db call"""
        # Filter to match filter object generated by route
        filters = {"city_id": 1, "min_battery": 10, "max_battery": 40}
        # Mocks database call
        mock_get_bikes = AsyncMock(return_value=self.fake_bike_data)
        monkeypatch.setattr(BikeRepository, "get_bikes", mock_get_bikes)

        async with AsyncClient(
            transport=ASGITransport(app=app), base_url="http://localhost:8000/"
        ) as ac:
            response = await ac.get("v1/bikes/?city_id=1&min_battery=10&max_battery=40")

        assert response.status_code == 200

        mock_get_bikes.assert_called_with(filters)
